20-07-2021

namespaces = isola os processos

namespaces > S. O.
	pid
	user
	network
	file system

cgroups = controla os recursos
	memory = 500mb
	cpu_shares = 512
	
file system = OFS (Overlay File System)

imagens 
	imagem inicial (scratch - imagem vazia, hd formatado)
	myImage:<version>[latest]
	estado imut√°vel
	
dockerfile = defini√ß√£o/constru√ß√£o de imagem
	FROM: (imagem existente)
	RUN: (comandos ex.: apt-get install apache)
	EXPOSE: 8000 (expor portas espec√≠ficas)

dockerfile > build > image (com camada read/write)

image > commit > image:v2

image registry = [image n, image y, image x]

docker host (daemon - API)

docker client
	- cria containers
	- run, pull, push
	- volumes (compartilhamento entre docker e computador)
	- network
	
21-07-2021 

comandos docker
	ps - lista containers rodando
	run - executar um contiainer
		exemplo: docker run <image:hello-world:version[latest]>
	pull - baixando do container registry 
	docker run -it ubuntu bash - -it > parametros
								 -i modo interativo
								 -t tty - para digitar coisas no terminal
								  ubuntu nome da imagem
								  bash comando a ser utilizado depois de baixar a imagem
	docker run -it --rm ubuntu bash
								--rm (quando sair ja remove automaticamente o container)

nginx - proxy reverso - servidor web
sudo docker run -p 8080:80 nginx:latest
	-p porta pubilshed apontada do docker cli
	8080 da minha maquina redirecionando para porta 80 do container

sudo docker run -d -p 8080:80 nginx:latest
	-d detached (desatachando o terminal do processo do container)

sudo docker rm "name|id" -f
	rm - mata o container
	-f - for√ßado (quando estiver ativo)

acessando e alterando arquivos de um container:
	sudo docker run -d --name nginx -p 8080:80 nginx
	sudo docker exec nginx ls
		executa um comando no nosso container
	sudo docker exec -it nginx bash
	cd /usr/share/nginx/html
	apt-get update
	apt-get install vim
	vim index.html

comandos vim:
	letra i: modo insert
	esc sair do modo insert
	:w (write para salvar)
	:q (quit sair)
	:q! (sair sem salvar)
	:wq (sair gravando)

bind mount (recomendado somente para ambiente de desenvolvimento)
	(monta um volume que est√° no seu computador para dentro do container):
	sudo docker run -d --name nginx -p 8080:80 -v ~/GitPersonal/full_cycle/html/:/usr/share/nginx/html nginx
	-v montei uma pasta do meu computador para uma pasta dentro do container
	echo $(pwd)
	sudo docker run -d --name nginx -p 8080:80 --mount type=bind,source="$(pwd)",target=/usr/share/nginx/html nginx
	diferen√ßa entre -v e --mount: --mount √© mais explicito, com o -v, consigo criar pastas que nao existam no source

trabalhando com volumes
	sudo docker volume ls
	sudo docker volume create meuvolume
	sudo docker volume inspect meuvolume
	sudo docker run --name nginx -d --mount type=volume,source=meuvolume,target=/app nginx
	sudo docker run --name nginx3 -d -v meuvolume:/app nginx
	sudo docker volume prune (remove todos os volumes nao utilizados por nenhum container, quando √© excluido um container n√£o √© removido o volume)

22-07-2021

docker registry => hub.docker.com
	docker pull ubuntu (s√≥ baixa a imagem)
	docker images (docker image ls)
	docker rmi <imagem:tag>

	docker build -t <usuario do docker hub/imagem:tag> . (em qual pasta existe o dockerfile)
	eg.: docker build -t bzll/nginx-com-vim:latest

	docker run -it bzll/nginx-com-vim bash
	docker run --rm bzll/hello (automaticamente remove se existir e cria)

todo arquivo .sh que tiver exec "$@" aceitara os parametros que serao passados depois do programa
exemplo
teste.sh echo "hello"

para publicar uma imagem no hub.docker
docker login (credentials)
docker logout (para sair)
docker push bzll/full_cycle

23-07-2021
tipos de network: 
	bridge (ponte - default), 
	host (mescla a network do docker com o host), 
	overlay (varios dockers em maquinas diferentes se comuniquem, eg.: docker swarm cria cluster de dockers)
	macvlan
	none

# bridge
	docker network ls
	docker network prune

	docker run -d -it --name ubuntu1 bash

	docker network inspect bridge

	docker attach ubuntu1

	ip addr show (mostra ip)

	criar uma nova rede
	docker network create --driver bridge minharede
	docker run -dit --name ubuntu1 --network minharede bash

	quando eu crio minha rede e for√ßo na cria√ß√£o do container, consigo comunicar pelo hostname
	ping ubuntu2

	conectar um container numa rede
	docker network connect minharede ubuntu3

# host

	n√£o preciso expor porta pois basicamente mecla as network do docker com a local
	docker run --rm -d --name nginx --network host nginx
	curl http://localhost

# container acessando algo no docker host
	curl http://host.docker.internal:8000

25-07-2021
	docker rm -f 7de (inicio do id)
	docker logs laravel
	docker build -t bzll/hello-express node/ -f Dockerfile.prod
	# link simbolico
	ln -s html bzll


	docker compose
	ferramenta complementar ao docker baseado em um arquivo de manifesto (.yaml) sobe todos os containers de forma automatica
	docker-compose up/down (para subir todos os containers) -d
	docker-compose ps
	docker-compose up -d --build (ir· reibuildar as imagens)

